# Generated by Django 4.2 on 2023-05-05 00:17

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('annotation_id', models.BigAutoField(db_comment='Primary key representing an annotation that can be applied to a move', primary_key=True, serialize=False)),
                ('symbol', models.CharField(db_comment="Symbol for this annotation (eg. '?' for Mistake or '??' for Blunder)", max_length=10)),
                ('name', models.CharField(db_comment="Name for this annotation (eg. 'Missed Win', 'Excellent Move')", max_length=30)),
                ('desc', models.CharField(db_comment='Detailed description for this annotation', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('deleted_at', models.DateTimeField(blank=True, db_comment="Time (in UTC) at which this record was 'soft-deleted' (flagged deleted)", default=None, null=True)),
            ],
            options={
                'db_table': 'annotations',
                'db_table_comment': "A record for each move annotation (eg. '?' for Mistake, '??' for Blunder, etc.)",
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_id', models.BigAutoField(db_comment='Primary key representing a Lichess event', primary_key=True, serialize=False)),
                ('lichess_event_id', models.CharField(db_comment="Unique, external Lichess ID for this Lichess event, prefixed with 'swiss-' if a Swiss tournament, prefixed with 'arena-' if an Arena tournament", max_length=30, unique=True)),
                ('event_name', models.CharField(db_comment='Name for this Lichess event', max_length=30)),
                ('start_date_utc', models.DateField(db_comment='Date (in UTC) on which this event began')),
                ('start_time_utc', models.DateTimeField(db_comment='Timestamp (in UTC) at which this event began')),
                ('duration_minutes', models.SmallIntegerField(db_comment='Number of minutes this event lasted')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('deleted_at', models.DateTimeField(blank=True, db_comment="Time (in UTC) at which this record was 'soft-deleted' (flagged deleted)", default=None, null=True)),
            ],
            options={
                'db_table': 'events',
                'db_table_comment': 'A record for each Lichess event (Arena or Swiss Tournament) during which at least one rated Antichess game was played',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('game_id', models.BigAutoField(db_comment='Primary key representing a unique rated Antichess game', primary_key=True, serialize=False)),
                ('lichess_game_id', models.CharField(db_comment='Unique external Lichess ID for this game', max_length=30, unique=True)),
                ('white_player_elo', models.SmallIntegerField(db_comment='Elo rating of the white player at the start of this game (rounded to the nearest whole number)')),
                ('white_player_elo_diff', models.SmallIntegerField(db_comment='Number of Elo points the white player gained or lost as a result of this game (rounded to the nearest whole number)')),
                ('black_player_elo', models.SmallIntegerField(db_comment='Elo rating of the black player at the start of this game (rounded to the nearest whole number)')),
                ('black_player_elo_diff', models.SmallIntegerField(db_comment='Number of Elo points the black player gained or lost as a result of this game (rounded to the nearest whole number)')),
                ('avg_player_elo', models.SmallIntegerField(db_comment='Average Elo rating between the white and the black player at the start of this game')),
                ('time_control', models.CharField(db_comment="Lichess-formatted string representing this game's time control (eg. '60+0' is a 1 minute game, no increment)", max_length=30)),
                ('time_control_base', models.SmallIntegerField(db_comment='Number of seconds each side started with on the clock for this game')),
                ('time_control_inc', models.SmallIntegerField(db_comment='Number of seconds added to each side’s clock per move in this game')),
                ('termination', models.CharField(db_comment='Lichess-designated termination for this game', max_length=50)),
                ('result', models.CharField(db_comment="'1-0' (white won), '0-1' (black won), or '½-½' (draw) or other if terminated abnormally", max_length=50)),
                ('date_utc', models.DateField(db_comment='Date (in UTC) on which this game began')),
                ('time_utc', models.DateTimeField(db_comment='Timestamp (in UTC) at which this game began')),
                ('pgn', models.TextField(db_comment='Full representation of this game in Portable Game Notation (PGN)')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('deleted_at', models.DateTimeField(blank=True, db_comment="Time (in UTC) at which this record was 'soft-deleted' (flagged deleted)", default=None, null=True)),
            ],
            options={
                'db_table': 'games',
                'db_table_comment': 'A record for each rated Antichess game played on Lichess',
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('player_id', models.BigAutoField(db_comment='Primary key representing a Lichess user who has played at least one rated Antichess game', primary_key=True, serialize=False)),
                ('lichess_username', models.CharField(db_comment='Unique username for this Lichess player (always represented in lowercase)', max_length=30, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('deleted_at', models.DateTimeField(blank=True, db_comment="Time (in UTC) at which this record was 'soft-deleted' (flagged deleted)", default=None, null=True)),
            ],
            options={
                'db_table': 'players',
                'db_table_comment': 'A record for each player on Lichess who has played at least one rated Antichess game',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('position_id', models.BigAutoField(db_comment='Primary key representing a unique board position', primary_key=True, serialize=False)),
                ('fen', models.CharField(db_comment='Representation of this position in abbreviated Forsyth-Edwards Notation (FEN), does not include some fields which are not necessary for the purposes of evaluating the position, such as move number', max_length=100)),
                ('eval', models.CharField(db_comment="Formatted string representing a centipawn value (eg. '-1.3') or a forced mate (eg. '#7')", max_length=20)),
                ('cp', models.DecimalField(db_comment='Fairy Stockfish’s centipawn evaluation for this position, with one decimal place (can be NULL if evaluation is a forced mate instead)', decimal_places=1, default=None, max_digits=9, null=True)),
                ('mate', models.SmallIntegerField(db_comment='Fairy Stockfish’s evaluation of the minimum number of moves until mate for this position, expressed as a positive if a mate for white, and as a negative if a mate for black (can be NULL if Fairy Stockfish cannot find a forced mate in this position)', default=None, null=True)),
                ('engine', models.CharField(db_comment="Full name of Fairy Stockfish version used for this position's evaluation", max_length=100)),
                ('depth', models.SmallIntegerField(db_comment="Depth to which Fairy Stockfish evaluated this position before producing this record's evaluation")),
                ('depth_limit', models.SmallIntegerField(db_comment="Maximum depth setting applied to Fairy Stockfish for this record's evaluation")),
                ('time_limit', models.SmallIntegerField(db_comment="Maximum time (in seconds) setting applied to Fairy Stockfish for this record's evaluation")),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('deleted_at', models.DateTimeField(blank=True, db_comment="Time (in UTC) at which this record was 'soft-deleted' (flagged deleted)", default=None, null=True)),
            ],
            options={
                'db_table': 'positions',
                'db_table_comment': 'A record for each unique position that has been achieved in at least one rated Antichess game on Lichess',
            },
        ),
        migrations.CreateModel(
            name='Move',
            fields=[
                ('move_id', models.BigAutoField(db_comment='Primary key representing a unique instance of a move played in a rated Antichess game', primary_key=True, serialize=False)),
                ('move_number', models.SmallIntegerField(db_comment="Represents this move's number for this game; each notated move has two plies (eg. The third move played by white would be move 3 ply 5, and the third move played by black would be move 3 ply 6)")),
                ('ply_number', models.SmallIntegerField(db_comment="Represents this move's ply for this game; each notated move has two plies (eg. The third move played by white would be move 3 ply 5, and the third move played by black would be move 3 ply 6)")),
                ('move_notation', models.CharField(db_comment="Representation of this move in Algebraic notation (eg. '1.Nf3' or '4...h5')", max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_comment='Time (in UTC) at which this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_comment='Time (in UTC) at which this record was most recently updated')),
                ('deleted_at', models.DateTimeField(blank=True, db_comment="Time (in UTC) at which this record was 'soft-deleted' (flagged deleted)", default=None, null=True)),
                ('annotation', models.ForeignKey(db_comment="Foreign key, references annotations.annotation_id, represents the annotation for this move (eg. '?? blunder', '!! brilliant', etc.), can be null if this move does not have an appropriate annotation or has not yet been annotated", null=True, on_delete=django.db.models.deletion.PROTECT, to='acdb_app.annotation')),
                ('game', models.ForeignKey(db_comment='Foreign key, references games.game_id, represents the game in which this move was played', on_delete=django.db.models.deletion.PROTECT, to='acdb_app.game')),
                ('player', models.ForeignKey(db_comment='Foreign key, references players.player_id, represents the player that played this move', on_delete=django.db.models.deletion.PROTECT, to='acdb_app.player')),
                ('resulting_position', models.ForeignKey(db_comment='Foreign key, references positions.position_id, represents the position that resulted from this move', on_delete=django.db.models.deletion.PROTECT, related_name='resulting_positions', to='acdb_app.position')),
                ('starting_position', models.ForeignKey(db_comment='Foreign key, references positions.position_id, represents the position at the start of this move', on_delete=django.db.models.deletion.PROTECT, related_name='starting_positions', to='acdb_app.position')),
            ],
            options={
                'db_table': 'moves',
                'db_table_comment': 'A record for each move played in a given rated Antichess game on Lichess',
            },
        ),
        migrations.AddField(
            model_name='game',
            name='black_player',
            field=models.ForeignKey(db_comment='Foreign key, references players.player_id, represents the player of the black pieces in this game', on_delete=django.db.models.deletion.PROTECT, related_name='black_players', to='acdb_app.player'),
        ),
        migrations.AddField(
            model_name='game',
            name='event',
            field=models.ForeignKey(db_comment='Foreign key, references events.event_id (can be null if this game did not take place within a Lichess Arena/Swiss Tournament)', default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='acdb_app.event'),
        ),
        migrations.AddField(
            model_name='game',
            name='white_player',
            field=models.ForeignKey(db_comment='Foreign key, references players.player_id, represents the player of the white pieces in this game', on_delete=django.db.models.deletion.PROTECT, related_name='white_players', to='acdb_app.player'),
        ),
        migrations.AddField(
            model_name='event',
            name='first_place_player',
            field=models.ForeignKey(db_comment='Foreign key, references players.player_id, represents the player that won this event', default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='first_place_players', to='acdb_app.player'),
        ),
        migrations.AddField(
            model_name='event',
            name='second_place_player',
            field=models.ForeignKey(db_comment='Foreign key, references players.player_id, represents the player that got second place at this event', default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='second_place_players', to='acdb_app.player'),
        ),
        migrations.AddField(
            model_name='event',
            name='third_place_player',
            field=models.ForeignKey(db_comment='Foreign key, references players.player_id, represents the player that got third place at this event', default=None, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='third_place_players', to='acdb_app.player'),
        ),
    ]
